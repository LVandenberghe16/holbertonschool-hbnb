"""
Facade pour la gestion des √©quipements.
Impl√©mente le pattern Facade pour isoler la complexit√© de la logique m√©tier.

Cette classe:
- Valide les donn√©es entrantes
- G√®re les interactions avec le repository
- Assure la coh√©rence des donn√©es
"""

from app.models.amenity import Amenity
from app.persistence.SQLAlchemyRepository import SQLAlchemyRepository

class AmenityFacade():
    """Impl√©mente la logique m√©tier pour les √©quipements."""

    def __init__(self):
        self.amenity_repo = SQLAlchemyRepository(Amenity)

    def create_amenity(self, amenity_data):
        """Cr√©e un nouvel √©quipement.

        Args:
            amenity_data (dict): Donn√©es de l'√©quipement

        Validation:
            - V√©rifie que le nom est non vide
            - V√©rifie que le nom est une cha√Æne

        Returns:
            Amenity: Instance cr√©√©e ou None si √©chec
        """
        name = amenity_data.get('name')
        if not name or not isinstance(name, str) or name.strip() == "":
            return None
        amenity = Amenity(name=name)
        self.amenity_repo.add(amenity)
        return amenity

    def get_amenity(self, amenity_id):
        """R√©cup√©rer une amenity par ID."""
        return self.amenity_repo.get(amenity_id)

    def get_all_amenities(self):
        """
        R√©cup√®re tous les √©quipements disponibles.

        Returns:
            list[Amenity]: Liste des √©quipements ou liste vide si aucun

        Notes:
            Retourne une liste vide plut√¥t que None pour √©viter les erreurs
        """
        amenities = self.amenity_repo.get_all()
        return amenities if amenities else []

    def update_amenity(self, amenity_id, amenity_data):
        """Met √† jour un √©quipement existant.

        Args:
            amenity_id (str): ID de l'√©quipement
            amenity_data (dict): Nouvelles donn√©es

        Returns:
            Amenity: Instance mise √† jour ou None si non trouv√©
        """
        print(f"üîç Debug: Tentative de mise √† jour de l'amenity {amenity_id} avec {amenity_data}")

        amenity = self.amenity_repo.get(amenity_id)

        if not amenity:
            print("‚ùå Amenity non trouv√©e !")
            return None  # Correction : √©vite une erreur 500

        # V√©rifier que 'name' est bien fourni et valide
        name = amenity_data.get("name")
        if not name or not isinstance(name, str) or name.strip() == "":
            print("‚ùå Donn√©es invalides pour la mise √† jour !")
            return None  # Correction : √©viter une mise √† jour invalide

        # Appliquer la mise √† jour
        amenity.name = name
        self.amenity_repo.update(amenity.id, {'name': amenity.name})

        print(f"‚úÖ Mise √† jour r√©ussie : {amenity}")
        return amenity


    def get_amenity_by_name(self, name):
        """Rechercher une amenity par son nom."""
        amenities = self.amenity_repo.get_all()
        for amenity in amenities:
            if amenity.name == name:
                return amenity
        return None

    def delete_amenity(self, amenity_id):
        """Supprimer une amenity."""
        return self.amenity_repo.delete(amenity_id)
