{
	"swagger": "2.0",
	"info": {
	  "title": "HBNB API",
	  "description": "API REST pour la gestion de locations de propriétés, inspirée d'Airbnb",
	  "version": "1.0",
	  "contact": {
		"email": "admin@hbnb.io"
	  }
	},
	"basePath": "/api/v1",
	"schemes": [
	  "http"
	],
	"securityDefinitions": {
	  "Bearer": {
		"type": "apiKey",
		"name": "Authorization",
		"in": "header",
		"description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
	  }
	},
	"paths": {
	  "/auth/login": {
		"post": {
		  "tags": ["Authentication"],
		  "summary": "Authentification utilisateur",
		  "description": "Authentifie un utilisateur et renvoie un JWT",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "description": "Identifiants de connexion",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "email": {
					"type": "string",
					"example": "admin@hbnb.io"
				  },
				  "password": {
					"type": "string",
					"example": "admin12345"
				  }
				}
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Authentification réussie",
			  "schema": {
				"type": "object",
				"properties": {
				  "access_token": {
					"type": "string"
				  },
				  "user": {
					"type": "object"
				  }
				}
			  }
			},
			"401": {
			  "description": "Identifiants invalides"
			}
		  }
		}
	  },
	  "/auth/register": {
		"post": {
		  "tags": ["Authentication"],
		  "summary": "Inscription utilisateur",
		  "description": "Crée un nouvel utilisateur dans le système",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "description": "Informations de l'utilisateur",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "first_name": {
					"type": "string",
					"example": "John"
				  },
				  "last_name": {
					"type": "string",
					"example": "Doe"
				  },
				  "email": {
					"type": "string",
					"example": "john.doe@example.com"
				  },
				  "password": {
					"type": "string",
					"example": "password123"
				  }
				}
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Utilisateur créé avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"409": {
			  "description": "Email déjà utilisé"
			}
		  }
		}
	  },
	  "/users": {
		"get": {
		  "tags": ["Users"],
		  "summary": "Liste tous les utilisateurs",
		  "description": "Accessible uniquement aux administrateurs",
		  "produces": ["application/json"],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Liste des utilisateurs récupérée avec succès"
			},
			"401": {
			  "description": "Non authentifié"
			},
			"403": {
			  "description": "Non autorisé"
			}
		  }
		}
	  },
	  "/users/{id}": {
		"get": {
		  "tags": ["Users"],
		  "summary": "Récupère les détails d'un utilisateur",
		  "description": "Récupère les informations détaillées d'un utilisateur par ID",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'utilisateur",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Informations de l'utilisateur récupérées avec succès"
			},
			"404": {
			  "description": "Utilisateur non trouvé"
			}
		  }
		},
		"put": {
		  "tags": ["Users"],
		  "summary": "Met à jour un utilisateur",
		  "description": "Met à jour les informations d'un utilisateur existant",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'utilisateur",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "Informations à mettre à jour",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "first_name": {
					"type": "string"
				  },
				  "last_name": {
					"type": "string"
				  },
				  "email": {
					"type": "string"
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Utilisateur mis à jour avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Utilisateur non trouvé"
			}
		  }
		},
		"delete": {
		  "tags": ["Users"],
		  "summary": "Supprime un utilisateur",
		  "description": "Supprime un utilisateur (admin uniquement)",
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'utilisateur",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Utilisateur supprimé avec succès"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Utilisateur non trouvé"
			}
		  }
		}
	  },
	  "/places": {
		"get": {
		  "tags": ["Places"],
		  "summary": "Liste tous les lieux",
		  "description": "Retourne tous les lieux disponibles",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "page",
			  "in": "query",
			  "description": "Numéro de page",
			  "required": false,
			  "type": "integer",
			  "default": 1
			},
			{
			  "name": "per_page",
			  "in": "query",
			  "description": "Nombre d'éléments par page",
			  "required": false,
			  "type": "integer",
			  "default": 20
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Liste des lieux récupérée avec succès"
			}
		  }
		},
		"post": {
		  "tags": ["Places"],
		  "summary": "Crée un nouveau lieu",
		  "description": "Ajoute un nouveau lieu à la base de données",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "description": "Objet lieu à ajouter",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "title": {
					"type": "string",
					"example": "Appartement Paris"
				  },
				  "description": {
					"type": "string",
					"example": "Bel appartement au centre de Paris"
				  },
				  "price": {
					"type": "number",
					"example": 120.0
				  },
				  "latitude": {
					"type": "number",
					"example": 48.8566
				  },
				  "longitude": {
					"type": "number",
					"example": 2.3522
				  }
				}
			  }
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Lieu créé avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"401": {
			  "description": "Non autorisé"
			}
		  }
		}
	  },
	  "/places/{id}": {
		"get": {
		  "tags": ["Places"],
		  "summary": "Récupère les détails d'un lieu",
		  "description": "Récupère toutes les informations d'un lieu spécifique",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Détails du lieu récupérés avec succès"
			},
			"404": {
			  "description": "Lieu non trouvé"
			}
		  }
		},
		"put": {
		  "tags": ["Places"],
		  "summary": "Modifie un lieu existant",
		  "description": "Met à jour les informations d'un lieu",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "Données à mettre à jour",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "title": {
					"type": "string"
				  },
				  "description": {
					"type": "string"
				  },
				  "price": {
					"type": "number"
				  },
				  "latitude": {
					"type": "number"
				  },
				  "longitude": {
					"type": "number"
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Lieu mis à jour avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Lieu non trouvé"
			}
		  }
		},
		"delete": {
		  "tags": ["Places"],
		  "summary": "Supprime un lieu",
		  "description": "Supprime un lieu existant",
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Lieu supprimé avec succès"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Lieu non trouvé"
			}
		  }
		}
	  },
	  "/places/{place_id}/reviews": {
		"get": {
		  "tags": ["Reviews"],
		  "summary": "Liste les avis d'un lieu",
		  "description": "Récupère tous les avis associés à un lieu spécifique",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "place_id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Liste des avis récupérée avec succès"
			},
			"404": {
			  "description": "Lieu non trouvé"
			}
		  }
		},
		"post": {
		  "tags": ["Reviews"],
		  "summary": "Ajoute un avis pour un lieu",
		  "description": "Crée un nouvel avis associé à un lieu spécifique",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "place_id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "Contenu de l'avis",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "text": {
					"type": "string",
					"example": "Super endroit, je recommande!"
				  },
				  "rating": {
					"type": "integer",
					"example": 5,
					"minimum": 1,
					"maximum": 5
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Avis créé avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"404": {
			  "description": "Lieu non trouvé"
			}
		  }
		}
	  },
	  "/reviews/{id}": {
		"get": {
		  "tags": ["Reviews"],
		  "summary": "Récupère les détails d'un avis",
		  "description": "Récupère toutes les informations d'un avis spécifique",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'avis",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Détails de l'avis récupérés avec succès"
			},
			"404": {
			  "description": "Avis non trouvé"
			}
		  }
		},
		"put": {
		  "tags": ["Reviews"],
		  "summary": "Modifie un avis existant",
		  "description": "Met à jour les informations d'un avis",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'avis",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "Données à mettre à jour",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "text": {
					"type": "string"
				  },
				  "rating": {
					"type": "integer",
					"minimum": 1,
					"maximum": 5
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Avis mis à jour avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Avis non trouvé"
			}
		  }
		},
		"delete": {
		  "tags": ["Reviews"],
		  "summary": "Supprime un avis",
		  "description": "Supprime un avis existant",
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'avis",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Avis supprimé avec succès"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Avis non trouvé"
			}
		  }
		}
	  },
	  "/amenities": {
		"get": {
		  "tags": ["Amenities"],
		  "summary": "Liste tous les équipements",
		  "description": "Retourne tous les équipements disponibles",
		  "produces": ["application/json"],
		  "responses": {
			"200": {
			  "description": "Liste des équipements récupérée avec succès"
			}
		  }
		},
		"post": {
		  "tags": ["Amenities"],
		  "summary": "Crée un nouvel équipement",
		  "description": "Ajoute un nouvel équipement à la base de données",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "description": "Objet équipement à ajouter",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "name": {
					"type": "string",
					"example": "Climatisation"
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Équipement créé avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"401": {
			  "description": "Non autorisé"
			}
		  }
		}
	  },
	  "/amenities/{id}": {
		"get": {
		  "tags": ["Amenities"],
		  "summary": "Récupère les détails d'un équipement",
		  "description": "Récupère toutes les informations d'un équipement spécifique",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'équipement",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Détails de l'équipement récupérés avec succès"
			},
			"404": {
			  "description": "Équipement non trouvé"
			}
		  }
		},
		"put": {
		  "tags": ["Amenities"],
		  "summary": "Modifie un équipement existant",
		  "description": "Met à jour les informations d'un équipement",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'équipement",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "Données à mettre à jour",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "name": {
					"type": "string"
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Équipement mis à jour avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Équipement non trouvé"
			}
		  }
		},
		"delete": {
		  "tags": ["Amenities"],
		  "summary": "Supprime un équipement",
		  "description": "Supprime un équipement existant",
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "ID de l'équipement",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Équipement supprimé avec succès"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Équipement non trouvé"
			}
		  }
		}
	  },
	  "/places/{place_id}/amenities": {
		"get": {
		  "tags": ["Places", "Amenities"],
		  "summary": "Liste les équipements d'un lieu",
		  "description": "Récupère tous les équipements associés à un lieu spécifique",
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "place_id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Liste des équipements récupérée avec succès"
			},
			"404": {
			  "description": "Lieu non trouvé"
			}
		  }
		},
		"post": {
		  "tags": ["Places", "Amenities"],
		  "summary": "Ajoute un équipement à un lieu",
		  "description": "Associe un équipement existant à un lieu",
		  "consumes": ["application/json"],
		  "produces": ["application/json"],
		  "parameters": [
			{
			  "name": "place_id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "ID de l'équipement à ajouter",
			  "required": true,
			  "schema": {
				"type": "object",
				"properties": {
				  "amenity_id": {
					"type": "string",
					"example": "1"
				  }
				}
			  }
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"201": {
			  "description": "Équipement ajouté au lieu avec succès"
			},
			"400": {
			  "description": "Données invalides"
			},
			"404": {
			  "description": "Lieu ou équipement non trouvé"
			}
		  }
		}
	  },
	  "/places/{place_id}/amenities/{amenity_id}": {
		"delete": {
		  "tags": ["Places", "Amenities"],
		  "summary": "Supprime un équipement d'un lieu",
		  "description": "Retire l'association entre un équipement et un lieu",
		  "parameters": [
			{
			  "name": "place_id",
			  "in": "path",
			  "description": "ID du lieu",
			  "required": true,
			  "type": "string"
			},
			{
			  "name": "amenity_id",
			  "in": "path",
			  "description": "ID de l'équipement",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "security": [
			{
			  "Bearer": []
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Équipement retiré du lieu avec succès"
			},
			"403": {
			  "description": "Non autorisé"
			},
			"404": {
			  "description": "Lieu ou équipement non trouvé"
			}
		  }
		}
	  }
	}
  }
